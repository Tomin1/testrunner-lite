/*! \mainpage testrunner-lite Reference Documentation

\section intro_sec Introduction

testrunner-lite  is  a tool for executing test commands. 
It is designed to be a lightweight wrapper for various test harnesses. The tool is driven by input XML file containing the test definitions (suite, set, case, step). Tests are executed as instructed in the input XML file and the  output
is written to result XML or text file.

@li @ref install

@li @ref opt_page

@li @ref main_mod_page

\page install Installation

The tool can be compiled into debian packages with 
\code dpkg-buildpackage \endcode and installed with \code dpkg -i testrunner-lite_<version>_<architecture>.deb \endcode .

\page opt_page Usage

The program is excuted from commandline 
\verbatim /usr/bin/testrunner-lite [options]
\endverbatim
\section opts Options
\subsection opt_help  -h,  --help
Display short help and exit

\subsection opt_version  -V,  --version
Display version information and exit

\subsection opt_file -f FILE,  --file FILE
Input file with test definitions in XML (required)

\subsection opt_ofile -o FILE,  --output FILE
Output file format; FORMAT can be xml or text (Default xml)

\subsection opt_verbose -v, -vv,  --verbose[={INFO|DEBUG}]
Enable  verbosity mode; -v and --verbose=INFO are equivalent outputting INFO, 
ERROR and WARNING messages. Similarly -vv and --verbose=DEBUG are equivalent, 
outputting also debug messages. Default behaviour is silent mode.

\subsection log_opt -L URL,  --logger=URL
Remote HTTP logger. Log messages are sent to given URL in a HTTP POST message. 
URL format is [http://]host[:port][/path/], where host  may be a hostname or 
an IPv4 address.

\subsection opt_auto -a,  --automatic
Enable only automatic tests to be executed

\subsection opt_syslog       -S,  --syslog
Enable logging to syslog.

\subsection opt_P  -P,  --print-step-output\fR
Output standard streams from test steps.

\subsection opt_manual       -m,  --manual
Enable only manual tests to be executed

\subsection opt_ci -c,  --ci
Disable validation of test definition against schema

\subsection opt_semantic       -s,  --semantic
Enable validation of test definition against stricter (semantics) schema

\subsection opt_valonly -A,  --validate-only
Do only input xml validation, do not execute tests

\subsection opt_nohwinfo -H,  --no-hwinfo
Do not try to obtain hardware information

\subsection opt_target  -t [USER@]ADDRESS, --target=[USER@]ADDRESS
Enable host-based testing. If given, commands are executed from test control 
PC (host) side. ADDRESS is the ipv4 adress of the system under test.


\subsection filt_opts Filtering options  

Filtering options allow selecting which tests are to be executed. Filtering options are given as a string. String may contain one or more filter entries. Format of each entry is 'filtername=values' where 'filtername' typically corresponds to an attribute in Test Definition XML and 'values' is a string to which the filter should match. Multiple values can be specified if separated by comma (without extra space). A value containing space must be enclosed in double quotes (""). Current list of forbidden characters in values is as follows: Single quote ('), double quote ("), is-equal-to sign (=), comma (,).

How filtering is carried out: Before processing the filter options, all tests are active by default. Filters can only deactivate tests: If filter value does not match with the value of the corresponding attribute, the test is disabled. Each filter entry is applied for all the active tests in the test package, one after another, in the given order. Filtering is always carried out at the lowest level of the "suite-set-case-step" hierarchy where the corresponding attribute can be defined. Note that some attributes may inherit the value from the upper level. Please refer to Test Definition XML for details.

If 'filtername' is prefixed with dash (-), the filter behaviour is reversed: those tests for which the filter value does match, are disabled.

'filtername' can be any of the following:
@li feature
@li requirement
@li testset
@li type
@li testcase

The following example does the following: First it disables all test cases except those with attribute type='Integration'. Next, a test case named as Bad Test is disabled. The tests left active will be executed.
\code
testrunner-lite -f tests.xml -o ~/results -l 'type=Integration -testcase="Bad Test"'
\endcode
The following example executes test cases that specify the requirement attribute with a value containing at least one of the following strings: '50001', '50002', '50003'.
\code
testrunner-lite -f tests.xml -o ~/results -l 'requirement=50001,50002,50003'
\endcode
Note that each key=values is handled as a separate filter, when checking whether a test case should be filtered. The following example will filter all the test cases, 
\code
testrunner-lite -f tests.xml -o ~/results -l 'testset=set1 testset=set2'
\endcode
whereas the following will accept tests from test sets "set1" and "set2".
\code
testrunner-lite -f tests.xml -o ~/results -l 'testset=set1,set2'
\endcode

\section manual_exec_sec Manual Test Cases

It is also possible to execute manual test cases using testrunner-lite, as defined in Test Definition XML.

In case manual test case is encountered during execution, testrunner-lite will go through the defined test steps and ask user whether the step is passed or failed. The test case will terminate at the first failure, otherwise every step defined will be executed. After the test case is done, user has the option to enter additional comments.

Example output when running manual case:
\verbatim
[INFO] 15:15:53 Starting test case: ExampleTestCase
--- Execute test step ---
Description:
Open calculator. Expected result: calculator opens up.

Please enter the result ([P/p]ass or [F/f]ail):
P

--- Execute test step ---
Description:
Stop calculator

Please enter the result ([P/p]ass or [F/f]ail):
P

--- Test steps executed, case is PASSED ---
Please enter additional comments (ENTER to finish):
Execution was slow.

[INFO] 15:16:41 Finished test case. Result: PASS
\endverbatim


\page main_mod_page Main Modules
\section main_mod Main Modules

Following gives short introduction to main modules of testrunner-lite to give
better understanding of the program flow.

\subsection main Main

File \ref main.c contains basic commandline parsing and calls for init functions of the testrunner-lite modules.

\subsection test_def Test definition parser

The test definition parsing is done in \ref testdefinitionparser.c. The data is saved to data structures defined in \ref testdefinitiondatatypes.h as the parsing progresses. File \ref testdefinitiondatatypes.c contains routines for intialization and cleanup of the test definition data types.

\subsection test_pro Test definition processor

The test definition processor communicates with the parser module. It calls \ref td_next_node as long as there is data to parse in test definition (or error occurs). The parser in turn calls callbacks in the processor for suite and set, so that when the parser has a set parsed into internal structs (\ref testdefinitiondatatypes.h), those are passed to processor that then executes steps in the set, writes results and frees the data. This way testrunner-lite needs to keep only one test set data at a time in its memory. For the actual execution of a test step, the processor module uses executor module.
 
\subsection execution Executor

The executor module (\ref executor.c) takes care of test step execution. File 
\ref remote_executor.c provides support for host based testing, where the test
steps are executed in a remote host over ssh. Manual test steps are handled 
in \ref manual_executor.c.

\subsection log Logger

The logger module \ref log.c provides routines for logging to stdout or to 
remote location with http POST method.

\subsection test_re Test result writer

Test results are written to text or xml writer in \ref testresultlogger.c.
*/

